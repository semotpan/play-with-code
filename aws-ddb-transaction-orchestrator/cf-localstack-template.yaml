AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for SQS, DynamoDB, Lambda, and Step Functions with LocalStack.

Resources:
  # SQS Queue
  OrderBatchUpdateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: orderBatchUpdateQueue

  # DynamoDB Table
  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: order
      AttributeDefinitions:
        - AttributeName: OrderId
          AttributeType: S
        - AttributeName: CustomerNumber
          AttributeType: S
      KeySchema:
        - AttributeName: OrderId
          KeyType: HASH  # Partition key
        - AttributeName: CustomerNumber
          KeyType: RANGE  # Sort key
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # DynamoDB Table for Batches
  OrderTransactionBatchesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: order-transaction-batches
      AttributeDefinitions:
        - AttributeName: BatchId
          AttributeType: S
        - AttributeName: CustomerNumber
          AttributeType: S
      KeySchema:
        - AttributeName: BatchId
          KeyType: HASH  # Partition key
        - AttributeName: CustomerNumber
          KeyType: RANGE  # Sort key
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # IAM Role for Step Functions
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: StepFunctionsExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem  # Added permission for DeleteItem
                Resource: "*"

  # IAM Role for Lambda (with permissions to delete items from DynamoDB)
  BatchGeneratorLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BatchGeneratorLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BatchGeneratorLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem  # Added permission for DeleteItem
                Resource: "*"

  # Lambda Functions
  BatchGeneratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BatchGeneratorLambda
      Runtime: java17
      Handler: io.awssample.handler.BatchOrderHandler::handleRequest
      Code:
        S3Bucket: artifact-storage-bucket
        S3Key: batch-generator-lambda-1.0-SNAPSHOT.jar
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt BatchGeneratorLambdaExecutionRole.Arn

  BatchHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BatchHandlerLambda
      Runtime: java17
      Handler: io.awssample.handler.BatchHandler::handleRequest
      Code:
        S3Bucket: artifact-storage-bucket
        S3Key: batch-handler-lambda-1.0-SNAPSHOT.jar
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt BatchGeneratorLambdaExecutionRole.Arn

  BatchCleanupLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BatchCleanupLambda
      Runtime: java17
      Handler: io.awssample.handler.BatchCleanupHandler::handleRequest
      Code:
        S3Bucket: artifact-storage-bucket
        S3Key: batch-cleanup-lambda-1.0-SNAPSHOT.jar
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt BatchGeneratorLambdaExecutionRole.Arn

  # Step Function State Machine
  FanOutStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: FanOutStateMachine
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: |
        {
          "Comment": "An example of the Amazon States Language for fanning out AWS Lambda tasks",
          "StartAt": "Generate batch job input",
          "TimeoutSeconds": 3600,
          "States": {
            "Generate batch job input": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:eu-west-1:000000000000:function:BatchGeneratorLambda",
              "ResultPath": "$.batch_map",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Fan out batch jobs"
            },
            "Fan out batch jobs": {
              "Type": "Map",
              "MaxConcurrency": 3,
              "ItemsPath": "$.batch_map",
              "Parameters": {
                "BatchNumber.$": "$$.Map.Item.Value"
              },
              "ItemProcessor": {
                "StartAt": "Process Batch Job",
                "States": {
                  "Process Batch Job": {
                    "Type": "Task",
                    "Resource": "arn:aws:lambda:eu-west-1:000000000000:function:BatchHandlerLambda",
                    "End": true
                  }
                }
              },
              "Next": "Batch cleanup"
            },
            "Batch cleanup": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:eu-west-1:000000000000:function:BatchCleanupLambda",
              "End": true
            }
          }
        }
